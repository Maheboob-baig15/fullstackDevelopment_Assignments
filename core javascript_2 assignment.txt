1) Create an arrow function called square that takes a number as an argument and returns its square. Use
the arrow function to calculate the square of a given number and display the result.

solution:

const square = (number) => number * number;

// Example usage
let number = parseInt(prompt("Enter a number:"));
let result = square(number);

console.log(`The square of ${number} is: ${result}`);


2) The following is an array of 10 students ages:
=> const ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24E
Sort the array and find the min and max ageG
Find the median age(one middle item or two middle items divided by two
Find the average age(all items divided by number of items
Find the range of the ages(max minus min
Compare the value of (min - average) and (max - average), use abs() method

solution:

const ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24];

// Step 1: Sort the array
ages.sort((a, b) => a - b);
console.log("Sorted Ages:", ages);

// Step 2: Find the min and max age
const minAge = ages[0];
const maxAge = ages[ages.length - 1];
console.log("Min Age:", minAge);
console.log("Max Age:", maxAge);

// Step 3: Find the median age
let median;
const middle = Math.floor(ages.length / 2);
if (ages.length % 2 === 0) {
    median = (ages[middle - 1] + ages[middle]) / 2;
} else {
    median = ages[middle];
}
console.log("Median Age:", median);

// Step 4: Find the average age
const sum = ages.reduce((acc, age) => acc + age, 0);
const average = sum / ages.length;
console.log("Average Age:", average);

// Step 5: Find the range of the ages
const range = maxAge - minAge;
console.log("Range of Ages:", range);

// Step 6: Compare (min - average) and (max - average) using abs()
const minDiff = Math.abs(minAge - average);
const maxDiff = Math.abs(maxAge - average);
console.log("Min-Average Difference:", minDiff);
console.log("Max-Average Difference:", maxDiff);

3)Create a Map to store contact information (name, age, email, location) and implement a function to
retrieve contact details by name.

solution: 
const contacts = new Map();


function addContact(name, age, email, location) {
    contacts.set(name, { age, email, location });
}


function getContactDetails(name) {
    if (contacts.has(name)) {
        const contact = contacts.get(name);
        console.log(`Contact Details for ${name}:`);
        console.log(`Age: ${contact.age}`);
        console.log(`Email: ${contact.email}`);
        console.log(`Location: ${contact.location}`);
    } else {
        console.log(`No contact found for ${name}.`);
    }
}

// Example usage
addContact("John Doe", 30, "john.doe@example.com", "New York");
addContact("Jane Smith", 25, "jane.smith@example.com", "Los Angeles");

// Retrieve contact details by name
getContactDetails("John Doe");
getContactDetails("Jane Smith");
getContactDetails("Alice Brown");


4)Create two objects person1 and person2 with properties name and age. Create a function “introduce” that
prints "Hello, I'm [name], and I'm [age] years old." Use the call method to make person2 introduce itself
using the introduce function.

solution: // Create two person objects
const person1 = {
    name: "John",
    age: 30
};

const person2 = {
    name: "Alice",
    age: 25
};

// Function to introduce a person
function introduce() {
    console.log(`Hello, I'm ${this.name}, and I'm ${this.age} years old.`);
}

// Using the call method to make person2 introduce itself using person1's method
introduce.call(person2);

5) You are developing a program to manage a list of unique items. Write a JavaScript program that uses a
Set to store a collection of unique numbers. Use the Map object to associate each number with its square.
Finally, print both the unique numbers and their corresponding squares.

solution: // Create a Set to store unique numbers
const uniqueNumbers = new Set([1, 2, 3, 4, 5, 6, 2, 4, 7]);


const squaresMap = new Map();

uniqueNumbers.forEach(number => {
    squaresMap.set(number, number * number);
});


console.log("Unique Numbers and Their Squares:");
uniqueNumbers.forEach(number => {
    console.log(`${number}: ${squaresMap.get(number)}`);
});


6) Create a simple JavaScript function named displayInfo that takes two parameters (name and role) and
logs a messageG
Use call to invoke the displayInfo function with specific argumentsG
Use apply to invoke the displayInfo function with arguments passed as an arrayG
Create another function named greet that logs a greeting with this contextG
Use bind to create a new function boundGreet with a specific context and log the greeting.

solution: 

 function displayInfo(name, role) {
    console.log(`Name: ${name}, Role: ${role}`);
}

displayInfo.call(null, "Alice", "Developer");

displayInfo.apply(null, ["Bob", "Designer"]);

function greet() {
    console.log(`Hello, my name is ${this.name} and I am a ${this.role}.`);
}

const person = {
    name: "Charlie",
    role: "Manager"
};

const boundGreet = greet.bind(person);

boundGreet();

7) Create an object named calculator with methods add, subtract, and multiplyG
Implement the calculate method in the calculator object, which takes an operation ('add', 'subtract', or
'multiply') and two numbersG
Use call to perform an addition operation using the calculate methodG
Use apply to perform a multiplication operation using the calculate method with arguments as an arrayG
Create another object named discountCalculator with a discount percentage property and a method
applyDiscountG
Use bind to create a new function calculateDiscount that is bound to the discountCalculator object and
can be reused.

solution:


const calculator = {
    add: function (a, b) {
        return a + b;
    },
    subtract: function (a, b) {
        return a - b;
    },
    multiply: function (a, b) {
        return a * b;
    },
    calculate: function (operation, a, b) {
        if (operation === 'add') {
            return this.add(a, b);
        } else if (operation === 'subtract') {
            return this.subtract(a, b);
        } else if (operation === 'multiply') {
            return this.multiply(a, b);
        } else {
            console.log("Invalid operation");
        }
    }
};


const sum = calculator.calculate.call(calculator, 'add', 5, 3);
console.log("Sum using call:", sum); // 8


const product = calculator.calculate.apply(calculator, ['multiply', 4, 7]);
console.log("Product using apply:", product); 

const discountCalculator = {
    discountPercentage: 10,
    applyDiscount: function (price) {
        const discount = price * (this.discountPercentage / 100);
        return price - discount;
    }
};

const calculateDiscount = discountCalculator.applyDiscount.bind(discountCalculator);

const discountedPrice = calculateDiscount(100)
console.log("Discounted price:", discountedPrice);



